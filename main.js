/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/script.js":
/*!**********************!*\
  !*** ./js/script.js ***!
  \**********************/
/***/ (() => {

eval("// Mobile Menu\r\nconst menuBtn = document.querySelector('[data-menu=\"menu\"]');\r\nconst menu = document.querySelector(\".menu-links\");\r\n\r\nmenuBtn.addEventListener(\"click\", toggleMenu);\r\n\r\nfunction toggleMenu(event) {\r\n  menu.classList.toggle(\"ativo\");\r\n}\r\n\r\ndocument.addEventListener(\"click\", closeMenu);\r\n\r\nfunction closeMenu(event) {\r\n  const isOutsideClick = menu.contains(event.target);\r\n\r\n  if (!isOutsideClick && event.target !== menuBtn) {\r\n    menu.classList.remove(\"ativo\");\r\n  }\r\n}\r\n\r\n// Search\r\nconst searchBtn = document.querySelector(\".search-icon\");\r\nconst searchMobile = document.querySelector(\"#search-mobile\");\r\nconst logo = document.querySelector(\".font-1-logo\");\r\n\r\nsearchBtn.addEventListener(\"click\", (e) => {\r\n  searchBtn.classList.add(\"active\");\r\n  searchMobile.classList.add(\"active\");\r\n  searchMobile.focus();\r\n\r\n  if (window.innerWidth <= 767) {\r\n    logo.style.display = \"none\";\r\n  }\r\n});\r\n\r\nsearchMobile.addEventListener(\"focusout\", () => {\r\n  searchBtn.classList.remove(\"active\");\r\n  searchMobile.classList.remove(\"active\");\r\n  logo.style.display = \"block\";\r\n});\r\n\r\n// Single Anime fetch Info from anime\r\nasync function getAnimeInfo() {\r\n  // Define o parámetro de busca através da URL\r\n  const queryString = window.location.search;\r\n  const searchParams = new URLSearchParams(queryString);\r\n  const animeSearch = searchParams.get(\"anime\");\r\n\r\n  // Busca pelo anime usando a API do gogoanime com base no parámetro da URL e retorna o animeId\r\n  const urlFetchSearch = `https://gogoanime.herokuapp.com/search?keyw=${animeSearch}`;\r\n  const fetchSearch = await fetch(urlFetchSearch);\r\n  const fetchSearchJson = await fetchSearch.json();\r\n  const anime = fetchSearchJson[0].animeId;\r\n\r\n  // Utiliza o animeId para buscar as informações do anime.\r\n  const urlFetchDetails = `https://gogoanime.herokuapp.com/anime-details/${anime}`;\r\n  const fetchDetails = await fetch(urlFetchDetails);\r\n  const fetchDetailsJson = await fetchDetails.json();\r\n\r\n  return fetchDetailsJson;\r\n}\r\n\r\nasync function getTrailerData() {\r\n  // Define o parámetro de busca através da URL\r\n  const queryString = window.location.search;\r\n  const searchParams = new URLSearchParams(queryString);\r\n  const animeSearch = searchParams.get(\"anime\");\r\n\r\n  // Faz busca na API do Kitsu para pegar informações complementares\r\n  const fetchKitsuUrl = `https://kitsu.io/api/edge/anime?filter[text]=${animeSearch}`;\r\n  const fetchKitsu = await fetch(fetchKitsuUrl);\r\n  const kitsuDetails = await fetchKitsu.json();\r\n\r\n  return kitsuDetails;\r\n}\r\n\r\nasync function addAnimeDetails() {\r\n  const animeDetails = await getAnimeInfo();\r\n  const kitsuDetails = await getTrailerData();\r\n\r\n  // Pega os elementos DOM da página\r\n  const pageAnimeTitle = document.querySelector(\"#anime-single .video h1\");\r\n  const pageAnimeEpisodes = document.querySelector(\".sinopse-content li.episodes\");\r\n  const pageAnimeStatus = document.querySelector(\".sinopse-content li.status\");\r\n  const pageAnimeGeneros = document.querySelector(\".sinopse-content li.genero\");\r\n  const pageAnimePosterWrapper = document.querySelector(\".sinopse-img\");\r\n  const sinopse = document.querySelector(\".sinopse-paragraph-content\");\r\n  const videoWrapper = document.querySelector(\".video-embed\");\r\n\r\n  // Operador ternário para traduzir o status do anime\r\n  const isAnimeFinished = animeDetails.status === \"Completed\" ? \"Completo\" : \"Lançando\";\r\n\r\n  // Adiciona os valores e remove a class Skeleton\r\n  pageAnimeTitle.classList.remove(\"skeleton\");\r\n  pageAnimeTitle.innerText = `${animeDetails.animeTitle} (${animeDetails.releasedDate})`;\r\n  pageAnimeEpisodes.innerHTML = `<span class=\"info\">Duração: </span><span class=\"info-content\">${animeDetails.episodesList.length} Episódios.</span>`;\r\n  pageAnimeStatus.innerHTML = `<span class=\"info\">Status: </span><span class=\"info-content\">${isAnimeFinished}.</span>`;\r\n  pageAnimeGeneros.innerHTML = `<span class=\"info\">Gêneros: </span><span class=\"info-content\">${animeDetails.genres\r\n    .slice(0, 3)\r\n    .join(\", \")}.</span>`;\r\n  sinopse.classList.remove(\"skeleton\");\r\n  sinopse.innerText = `${animeDetails.synopsis}`;\r\n\r\n  // Adiciona o poster\r\n  const poster = document.createElement(\"img\");\r\n  poster.src = animeDetails.animeImg;\r\n  poster.alt = animeDetails.animeTitle;\r\n  pageAnimePosterWrapper.classList.remove(\"skeleton\");\r\n  pageAnimePosterWrapper.append(poster);\r\n\r\n  // Pega o Trailer ID do YouTube\r\n  const trailerID = kitsuDetails.data[0].attributes.youtubeVideoId;\r\n  const youtubeEmbed = `<iframe src=\"https://www.youtube.com/embed/${trailerID}\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>`;\r\n  videoWrapper.outerHTML = youtubeEmbed;\r\n\r\n  console.log(youtubeEmbed);\r\n  console.dir(videoWrapper);\r\n}\r\n\r\nasync function recentEpisodes() {\r\n  const urlFetch = \"https://gogoanime.herokuapp.com/recent-release?page=1\";\r\n  const fetchRecent = await fetch(urlFetch);\r\n  const recentJson = await fetchRecent.json();\r\n\r\n  const recentEpidoes = recentJson.map((e) => {\r\n    console.log(e);\r\n    const animeItemWrapper = document.querySelector(\"div.grid-latest\");\r\n    const animeItem = document.createElement(\"a\");\r\n    animeItem.setAttribute(\"href\", \"./anime.html\" + \"?anime=\" + e.animeTitle);\r\n    animeItem.classList.add(\"anime-item\");\r\n    animeItem.innerHTML = `\r\n          <div class=\"cover\">\r\n            <span class=\"episode font-2-mr\">Episódio ${e.episodeNum}</span>\r\n            <img src=\"${e.animeImg}\" alt=\"${e.animeTitle}\" />\r\n          </div>\r\n          <span class=\"anime-title font-1-m\">${e.animeTitle}</span>\r\n    `;\r\n    animeItemWrapper.append(animeItem);\r\n    console.log(animeItem);\r\n  });\r\n}\r\n\r\nif (window.location.pathname === '/') recentEpisodes();\r\n\r\nif (window.location.pathname.includes(\"anime.html\")) addAnimeDetails();\r\n\n\n//# sourceURL=webpack://Anime/./js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/script.js"]();
/******/ 	
/******/ })()
;